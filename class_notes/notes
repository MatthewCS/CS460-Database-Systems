01-24:
Building our University Database:

    (uni_db.sql)
    ------------------------------------------------------------------------------------------------
    create table department ( name varchar(40), building varchar(10), budget integer,
    primary key (name));

    create table instructor ( ID integer, name varchar(20), dept varchar(40), salary integer,
    primary key (ID),
    foreign key (dept) references department(name));

    create table course (course_id varchar(7), title varchar(25), dept varchar(40), credits integer,
    primary key (course_id),
    foreign key (dept) references department (name));

    create table prereq (course_id varchar(7), prereq_id varchar(7),
    foreign key (course_id) references course(course_id),
    foreign key (prereq_id) references course(course_id));

Some data for our department:
    department(name, building, budget):
    ------------------------------------------------------------------------------------------------
    (“Electrical and Computer Engineering”, “CAMP”, 20000),
    (“Physics”, “Science Center”, 10000),
    (“Comp. Eng.”, “Science Center”, 10101),
    (“Comp. Sci.”, “Science Center”, 32000),
    (“Military Science”, “Snell”, 50000),
    (“History”, “Snell”, 10050),
    (“Politics”, “Snell”, 10030),
    (“Digital Arts”, “Snell”, 10700),
    (“Graphics”, “Snell”, 10900),
    (“U.S. History”, “Snell Hall”, 30000),
    (“Chemistry”, “Science Center”, 56700),
    (“Math”, “Science Center”, 20000),
    (“Political Science”, “Science Center”, 25000),
    (“Statistics”, “Science Center”, 20600),
    (“Robotics”, “Science Center”, 19500),
    (“Psychology”, “Snell Hall”, 30700),
    (“Music”, “Snell Hall”, 21500),
    (“Economics”, “Snell Hall”, 40100),
    (“Software Eng”, “CAMP”, 56000),
    (“Communications”, “Snell Hall”, 50000);

01-29:
Relational algebra:

    Relational algebra is a procedural language constituted by a set of operations that take one or two relations as input at produce a new relation as their result.

    Select:             σ
    Project:            ∏
    Union:              ∪
    Set intersection:   ∩
    Set differrence:    -
    Cartesian product:  x
    Rename:             ρ

    Here is a problem:
        "Select every instructor where the instructor is in the 'Physics' department"
        Query:
            σ dept_name = "Physics" (instructor)
        Result:
            ID     name        dept_name    salary
            --------------------------------------
            22222  Einstein    Physics      95000
            33456  Gold        Physics      87000

    We allow comparisons using
        =, ≠, >, ≥, <, ≤
    in the selection predicate.

    We can combine several predicates into a larger predicate by using the connectives:
        ∧ (and), ∨ (or), ¬ (not)

    Project operation example:
        Query:
            ∏ ID, name, salary (instructor)
        Result:
            ID     name        salary
            -------------------------
            10101  Srinivasan  65000
            12121  Wu          90000
            15151  Mozart      40000
            22222  Einstein    95000
            ......... etc. .........
            76766  Crick       72000
            83821  Brandt      92000
            98345  Kim         80000

    Consider the following query:
        ∏ name (σ dept_name = "Physics" (instructor))
        "Project all names from the instructor table where the instructor works in the 'Physics' department."
        Result:
            name        
            ------------
            Einstein
            Gold

01-30:
More relational algebra:

    The join operation allows us to combine a select operation and a Cartesian-Product operation into a single statement.
        Again, consider this query:
            ∏ name (σ dept_name = "Physics" (instructor))

    The union operation allows us to combine two relations.
        Notation: R ∪ S
        For "R ∪ S" to be valid:
            R, S must have the same arity (same number of attributes)
            The attribue domains must be compatible.
                Example: the second column of R deals with the same type of values as the second column of S.

    And operation:
        Self-explanitory. Select data if one condition AND another condition are true.
        Example:
            ∏ course_id (σ semester="Fall" ∧ year=2017 (section)) ∪
            ∏ course_id (σ semester="Spring" ∧ year=2018 (section)) 
                This query will select every class offered in the 2017-2018 academic year.

    The Set-Intersection operation allows us to find tuples that are in both of the input relations.
        Notation: R ∩ S
            Assume that R and S have the same arity, and each attribute is compatible
        Example:
            ∏ course_id (σ semester="Fall" ∧ year=2017 (section)) ∩
            ∏ course_id (σ semester="Spring" ∧ year=2018 (section)) 
                This query will select every class offered in both the Spring AND the Fall of the 2017-2018 academic year.

    The Set-Difference operation allows us to find tuples that are in one relation, but not in another.
        Notation: R - S
            Set-differences must be taken between compatible relations.
        Example:
            ∏ course_id (σ semester="Fall" ∧ year=2017 (section)) -
            ∏ course_id (σ semester="Spring" ∧ year=2018 (section)) 
                This query will select every class offered in the Fall AND NOT in the Spring.

    The assignment operation is denoted by an arrow ← and sets a temporary value.
        Example:
            Physics ← ∏ name (σ dept_name = "Physics" (instructor))
            Music ← ∏ name (σ dept_name = "Music" (instructor))
            Physics ∪ Music
        This will represent every insructor who teaches in both the music department and in the physics department. A true Renaissance Man!

    The rename operation is denoted by ρ and will give a name to a relational algeba expression.
        Example:
            ρx (E)
        That expression will return the result of E under the name x.

    In plain English:
        Take the following expression:
            σ dept_name = "Physics" (instructor)
        This can be written as:
            select * from instructor where dept_name="Physics"
        Or:
            select all instructors from the Physics department
        -------------------------------------------------------------------
        But what if we did this?
            ∏ name (σ dept_name = "Physics" (instructor))
        We would then write:
            select name from instructor where dept_name="Physics"
        Or:
            select the names of all instructors from the Physics department
        -------------------------------------------------------------------
        Now, how about this?
            ∏ name, salary (σ dept_name = "Music" ∧ salary > 90000  (instructor))
        We would then write:
            select name, salary from instructor where dept_name="Music" and salary > 90000
        Or:
            select the names and salaries of all instructors from the Music department that earn over $90,000 a year.

02-03:
Super Monday, today should be a day off.

    Homework online, due at the end of the week, based out of the textbook.

    IBM stated developing SQL as a part of System R in the San Jose Research Labs
    SQL means "Structured Queary Language"
    There are multiple SQL standards:
        SQL-86
        SQL-89
        SQL-92
        SQL:1999 (language name before Y2K complaint!)
        SQL:2003

    Commerical systems mostly offer features from SQL-92.
        Also includes features from later releases & some proprietary features.

    IBM has its own database system called DB2. Microsoft has SQL Server.

    SQL dialects are all written in a similar manner. If you learn one dialect, you've learned the basics of all of them.

    SQL parts:
        DML -- provides the ability to query information from the database and to insert tuplies into, delete tuples from, and modify tuples in the database.
        Integrity -- the DDL includes commands for despeciiifying integrity constraints.
        View definition -- the DDL includes commands for defining views.
        Transaction contol -- includescommands for specifying the beginning and ending of transactions.
        Embedded SQL and dynamic SQL -- define how SQL statements can be embedded within general-purpose programming languages.
        Authorization -- includes commands for specifying access rights to relations and views.

    The SQL data-definition language (DDL) allows the specification of information about relations.

    Data types in SQL:
        char(n):                Fixed length character string, with length n
        varchan(n):             Variable length character strings, with max length n
        int:                    Normal integer
        smallint:               Less integer
        numeric(p, d):          Fixed point number, storing p digits, with d decimals
                                numeric(5, 2) allows for 987.12, but not 987.123456.....
        real, double precision: Floating point number, with machine-dependant percision
        float(n):               Floating point number, with user-specified precision of at least n digits
        ... and more.

    A SQL relation is defined using the "create table" command:
        create table r
            (A1 D1, A2 D2, ..., An Dn,
                (integrity-constraint 1),
                    ...,
                (integrity-constraint k));

    Types of integrity constraings:
        primary key (A1, ..., An)
        foreign key (Am, ..., An) references r
        not null

    SQL prevents any update to the database that violates an integrty constraint.

    Ediing tables:
        insert:
            insert into r values (V1, V2, ..., Vn);
        delete:
            delete from student
                Removes all tuples from the student relation
        drop table:
            drop table r
                Get rid of r!
        alter:
            alter table  add A D
                ... Where A is the name of the attribute to be added to relation r, and D is the domain of A
            alter table r drop A
                ... where A is the name of an attribute of relation r
                Dropping of attributes is NOT supported by many databases
        modify:
            change datatype of an attribute in a table

        A typical SQL query has the following form:
            select A1, A2, ..., An
            from R1, R2, ..., Rm
            where P
                Ai represents an attribute
                Ri represents a relation
                P is a predicate
            The result of an SQL query is a relation, so we can nest queries (subquery).

        The select clause lists the attributes given in the reslt of a query.
            Corresponds to the projection operation of relational algebra.
            NOTE: names in SQL are case-sensitive!
            SQL allows duplicates in relations as well as in query calls.
                To force the elimination of duplicates, insert the keyword "distinct" after "select"
            A wildcard/asterisk "*" denotes "all attributes"
            An attribute can be a literal with no "from" clause:
                select '123'
                    Results in a table with one column and a single row with value "123"
            We can give a column in the resulting query its own name:
                select '123', 'hello world!' as FOO, BAR

02-12:
Backstreet's back, alright.

    An outline of SQL:
        SQL supports the following:
            A DML
            Basic operations
            Set operations
            Null vales
            Aggregate functions
            Nested subqueries
            Database modification
            Tranactions
            Data ownership

    String operations:
        SQL includes a string-matching operation for comparisons on chaaracter strings.
            The operator "like" uses patterns that are described using two special characters:
                % : Match any substring
                _ : Match any character
            This query will select all instructors whose name includes the supstring "dar":
                -----------------------------------

                select name
                from instructor
                where name like '%dar%';

                -----------------------------------
            This query will select all courses listed under "MA" (math):
                -----------------------------------

                select course_id
                from course
                where course_id like 'MA%';

                -----------------------------------
            This will match the string "100%":
                -----------------------------------

                like '100\%' escape '\';

                -----------------------------------
                    We use a backslash (\) as an escape character.
            Patterns are case sensitive.
            Pattern matching examples:
                'Intro%' matches any string beginning with "Intro".
                "%Comp%' matches any string containing "Comp" as a substring.
                '___' matches any string of exactly three characters.
                '___%' matches any string of three or more characters.
        SQL supports a variety of other operations, such as:
            Concatenation (using "||")
            Conversion from upper to lower case (and vice versa)
            Finding string length
            Extracting substrings
            Etc.
    
    Ordering the display of tables:
        The following query lists (in alphabetic order) the names of all instructors
                -----------------------------------

                select distinct name
                from instructor
                order by name;

                -----------------------------------
        We may specify "desc" for descending order or "asc" for ascending order for each attribute. Ascending is the default.
                -----------------------------------

                order by name desc;
                
                -----------------------------------
        We can order this with multiple attibutes
                -----------------------------------

                order by dept_name, name;
                
                -----------------------------------

    Where clause predicates:
        SQL incldes a between comparison operator
            Example: find the names of all instrucotrs with a salary between $90,000 and $100,000
                -----------------------------------

                select name
                from instructor
                where salary between 90000 and 100000

                -----------------------------------

            Tuple comparison:
                -----------------------------------

                select name, course_id
                from instructor, teaches
                where (instructor.ID, dept_name) = (teaches.ID, 'Biology');
                
                -----------------------------------

    Set operations:
        We can treat a table as a set of tuples.
            A set, unlike a table, doesn't allow duplicates. Therefore, by treating a table as a set, some rows may be lost.
        Find courses that ran in Fall 2017 or Spring 2018:
            -----------------------------------

            (select course_id from section where sem = 'Fall' and year = 2017)
            union
            (select course_id from section where sem = 'Spring' and year = 2018) 
            
            -----------------------------------
        Find courses that ran in Fall 2017 and Spring 2018:
            -----------------------------------

            (select course_id from section where sem = 'Fall' and year = 2017)
            intersect
            (select course_id from section where sem = 'Spring' and year = 2018) 
            
            -----------------------------------
        Find courses that ran in Fall 2017 but not in Spring 2018:
            -----------------------------------

            (select course_id from section where sem = 'Fall' and year = 2017)
            except
            (select course_id from section where sem = 'Spring' and year = 2018) 
            
            -----------------------------------
        The above queries will automatically eliminate duplicate values.
        To retain duplicate values, we use the "all" keyword:
            union all
            intersect all
            except all

    Null values:
        It is possible for tuples to have a null value, denoted by "null", for some of their attributes.
        null signifies an unknown value or a value that does not exist.
        The result of any arithmetic expression involving null is null.
            Example:    5 + null returns null
        The result of most logical expressions involving null is false.
            Example:    null < 100000 returns false
        The predicate "is null" can be used to check for null values.
            Example: find all instructors whose salary is null:
                -----------------------------------

                select name
                from instructor
                where salary is null;

                -----------------------------------
        The predicate "is not null" will reject all null values --- very useful!

02-26:


    Modifying a table:
        deletion
            delete from _
                where _;
        
        insertion:
            insert into _
                values _, _, _;

            insert into _ select * from _;
            ^^^ Problematic!
            The select clause is fully evaluated before any of its results will be used.
        
        updating:
            update _
                set value = value * 1.05;
            ^^^
            Update value --- increase by 5%.

            update _
                set value = case
                    when value < 1000 then value * 1.05
                    else value * 1.03
                end;
            ^^^
            Update value --- for ever value less than 1,000, increment by 5%. Otherwise, increment by 3%.

    Updpates with scalar subqueries:
        update student S
        set for_cred =
        (
            select sum(credits)
            from takes, course
            where takes.course_id = course.course_id
                and S.ID = takes.ID
                and takes.grade <> 'F'
                and takes.grade is not null
        );
        ^^^ Interesting, but not good!
        This will set for_creds to null for students who have not taken any course!
        Instead of sum(credits), let's do this:
            case
                when sum(credits) is not null then sum(credits)
                else 0
            end


    Now, let's move on to...
     ***** Intermediate SQL!!! ***** 
        Join expressions
        Views
        Transactions
        Integrity constraints
        SQL data types and schemes
        Etc.


    Joined relations:
        Join operations take two relations and return another relation as a result.
        The following are all join operations in MySQL:
            natural join
            inner join
            outer join

        This query lists the names of all instructors, as well as the ID of the courses that they taught.
            select name, course_id
            from student, takes
            where student.ID = takes.ID;

        This is the same query in SQL, but using the 'natural join' operation:
            select name, course_id
            from student natural join takes;

        Natural join tells MySQL to join tuples if and only if they share some column.
        The other, more verbose version is better. It is safer and more vebose. The example above is not a good use of a join operation!

        Valid syntax:
            select * from student
            natural join takes, course
            where takes.course_id = course.course_id;
        Invalid syntax:
            select * from student
            natural join takes
            natural join course
            where takes.course_id = course.course_id;


03-06:
"Searching for something to say
[HORNS]
Waiting for the brink of day
[HORNS ESCALATE]"

    How do we work with integrity in a database? Not just the integrity of our data --- how do we control access?
        Authorization!

    In some cases, it is not desirable for all users to see the entire database.
    Cosider a person who need to see an instructor's name and ID, but not salary:
        select ID, name, dept_name
        from instructor;
    A "view" provides a mechanism to hide certain data from the view of certain users.
    And relation made visible to the user --- not just a conceptual model! --- is called a "view."

    A lot of people work with data, but not all of them work with SQL. IT departments might be afraid of these people.
        Thus, a view guards against any major damage!

    A view is defined as follows:
        create view v as < QUERY >;
    For example, this is a view of instructors with their salaries omitted:
        create view faculty as
            select ID, name, dept_name
            from instructor;

    One view may be used to define another.
    A view relation, v1, is raid to "depend directly" on a view v2 if v2 is used in the expression defining v1.

    Sometimes, we can physically store our data. A copy of our data is written into memory when a "material view" of it is defined.

    Now, let's go back to our faculty view. Watch this:
        insert into faculty
            values ('30765', 'Green', 'Music');
    The insertion must be represented by the insertion into the instructor relation, because we must have a view for salary.
    This is because when we insert a tuple into the faculty view, we are inserting it into our instructor table.
    There are two approaches we can take here:
        1 ) Reject the insert query entirely.
        2 ) Insert into instructor the tuple
                ('30765', 'Green', 'Music', null);
            If null values are allowed.
    In general, we aren't allowed to insert data through a view. It's possible, sometimes, but never a smart idea.

    Most SQL implementations only allow updates on simple views.
        The "from" clause has only one database relation.
        The "select" clause only contains attribute nates of the relation, and does not have any expression, aggregates, etc.
        There is no "group by" or "having" clause.
        And so on...


    All of that is cool, but... what about transactions?
    A transaction consists of a sequence of query and / or update statements and is a "unit" of work.
        Example:    withdraw $100.00 from band account A,
                    then deposit $100.00 into bank account B.
    The SQL standard specifies that a transaction begins implicitly when a SQL statement is executed.
    The transacion must end with one of the following:
        Commit work:    Update our database with the results of our transaction
        Rollback work:  Undo everything from ou transaction --- abort, abort!
    This is an "Atomic transaction" --- one that is either fully executed, or treated as though it never occurred.
    SQL allows for an isolation from other concrrent transactions.


    And what are integrity constraints?
    Integrity constraints are a set of mechanisms to guard against damage to our database.
    This ensures that authorized changes to the database do not result in a loss of data consistency.
        A checking account must neer have a balance greater than $10,000.00.
        Campus salaries must never be lower than $11.80 / hour.
        Customers must always have a (non-null) phone number.
    The constraints directly built into SQL are as follows:
        not null
        primary key
        unique(A1, A2, ..., An-1, An)
            Where Ai is some column in our table.
        check (P)
            P is some predicate
    There is also "foreign key", which we can refer to as "referential integrity"
    Important to know: the "cascade" keyword is integral for referential integrity. Essentially, whenever a
    ... change is made to a foreign table, anything that references that table will also be changed.
    "cascade" is shorthand:
        set null,
        set default
